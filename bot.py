# -*- coding: utf-8 -*-
"""bot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iVCn73A-4_1-tQAHcl4QtSFN-lBwc53B
"""

from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from src.recommender import CourseRecommender
from src.parser import update_all_programs
from config import TELEGRAM_TOKEN, UPDATE_INTERVAL
import logging
from datetime import datetime

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

recommender = CourseRecommender()
last_update = datetime.now()

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    update.message.reply_markdown_v2(
        fr"Привет {user.mention_markdown_v2()}\! Я помогу тебе выбрать магистерскую программу по ИИ в ИТМО\. "
        "Доступные команды:\n"
        "/start \- начать диалог\n"
        "/compare \- сравнить программы\n"
        "/recommend \- получить рекомендации курсов\n\n"
        "Можешь просто написать свой вопрос о программах\."
    )

def compare_programs(update: Update, context: CallbackContext):
    comparison = recommender.compare_programs()
    update.message.reply_markdown(comparison)

def recommend_courses(update: Update, context: CallbackContext):
    update.message.reply_text(
        "Расскажи о своем опыте и интересах (например: "
        "'Я инженер с опытом в машинном обучении' или "
        "'Меня интересует продуктовая разработка'), "
        "и я порекомендую подходящие курсы."
    )

def handle_message(update: Update, context: CallbackContext):
    global last_update
    text = update.message.text

    if (datetime.now() - last_update).seconds > UPDATE_INTERVAL:
        update_all_programs()
        last_update = datetime.now()
        logger.info("Данные программ обновлены")

    if any(w in text.lower() for w in ['сравн', 'различ', 'отлич']):
        compare_programs(update, context)
    elif any(w in text.lower() for w in ['рекоменд', 'совет', 'выбор']):
        recommendations = recommender.recommend_courses(text)
        if recommendations:
            courses = "\n".join([f"- {c['name']} ({c['credits']} кредитов)" for c in recommendations])
            update.message.reply_text(f"Рекомендуемые курсы:\n{courses}")
        else:
            update.message.reply_text("Не удалось подобрать рекомендации. Уточни свой запрос.")
    else:
        update.message.reply_text(
            "Я могу:\n"
            "1. Сравнить программы\n"
            "2. Порекомендовать курсы\n"
            "3. Ответить на вопросы о программах"
        )

def error_handler(update: Update, context: CallbackContext):
    logger.error(msg="Ошибка в боте:", exc_info=context.error)
    update.message.reply_text("Произошла ошибка. Попробуйте позже.")

def main():
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("compare", compare_programs))
    dp.add_handler(CommandHandler("recommend", recommend_courses))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()