# -*- coding: utf-8 -*-
"""recommender

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iVCn73A-4_1-tQAHcl4QtSFN-lBwc53B
"""

from typing import List, Dict
import random
from .parser import load_program_data

class CourseRecommender:
    def __init__(self):
        self.ai_program = load_program_data('ai.json')
        self.ai_product_program = load_program_data('ai_product.json')

    def get_background_type(self, text: str) -> str:
        text = text.lower()
        if any(word in text for word in ['инженер', 'разработчик', 'технический', 'программист']):
            return 'technical'
        elif any(word in text for word in ['менеджер', 'продукт', 'бизнес', 'управление']):
            return 'product'
        else:
            return 'mixed'

    def recommend_courses(self, background: str, program: str = 'ai') -> List[Dict]:
        program_data = self.ai_program if program == 'ai' else self.ai_product_program
        bg_type = self.get_background_type(background)

        elective_courses = [s for s in program_data['subjects'] if s['type'] == 'Выборный']

        if bg_type == 'technical':
            keywords = ['машинн', 'алгоритм', 'нейронн', 'оптимизац']
        elif bg_type == 'product':
            keywords = ['менеджмент', 'продукт', 'бизнес', 'управлен']
        else:
            keywords = ['прикладн', 'этик', 'анализ']

        recommended = []
        for course in elective_courses:
            if any(kw in course['name'].lower() for kw in keywords):
                recommended.append(course)

        return recommended[:5]

    def compare_programs(self) -> str:
        comparison = []
        for field in ['title', 'description']:
            comparison.append(f"**{field.capitalize()}**:")
            comparison.append(f"- ИИ: {self.ai_program[field][:200]}...")
            comparison.append(f"- Продуктовый ИИ: {self.ai_product_program[field][:200]}...")

        return "\n".join(comparison)